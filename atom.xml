<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bydraw&#39;s hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://bydraw.github.io/"/>
  <updated>2018-04-03T07:15:45.632Z</updated>
  <id>https://bydraw.github.io/</id>
  
  <author>
    <name>Bydraw Holy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一个简单Vue父子组件数据同步的方法</title>
    <link href="https://bydraw.github.io/2018/04/03/20180403_2/"/>
    <id>https://bydraw.github.io/2018/04/03/20180403_2/</id>
    <published>2018-04-03T05:36:21.820Z</published>
    <updated>2018-04-03T07:15:45.632Z</updated>
    
    <content type="html"><![CDATA[<p><i>由文档中复刻data作为局部数据处理的方法演变而来</i><br><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Vue 2.x版本中，父子组件之间是<strong>单向数据流</strong>，这意味着不应该在子组件内部改变父组件传进来的数据，而有时这种场景确实存在。<br>对此，官网文档上是通过<strong>组件内部定义data变量接受prop或使用计算属性处理一遍</strong>，但这仅仅相当于在组件内部初始化一次，产生一个内部的、新的变量，这样并<strong>不能影响到外部父组件上的data</strong>。<br>而实际想实现的是子组件接受外部prop传进的变量，并在组件内部改变这个变量时响应到父组件并改变它。<br>所以大概思路就是：<strong>在组件内部定义data，接受prop，并监听此变量，一旦变化便直接$emit一个事件传递给父组件，父组件通过给组件绑定的方法改变自身data，从而实现父子组件数据同步</strong>。</p><h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><p>此处例子比较特殊，是一个用v-model绑定数据的input模型，由于v-model的特殊性，在输入框内容改变时就会响应到model。<br>先看最原始的模型：<br><em>HTML</em></p><pre><code>&lt;div id=&quot;root&quot;&gt;    &lt;test :msg=&quot;msg&quot;&gt;&lt;/test&gt;&lt;/div&gt;</code></pre><p><em>JS</em></p><pre><code>Vue.component(&#39;test&#39;, {    template: &#39;&lt;input v-model=&quot;msg&quot;&gt;&#39;,    props: [&#39;msg&#39;]})new Vue({    el: &#39;#root&#39;,    data: {        msg: &#39;hello&#39;    }})</code></pre><p>理想中的效果是父组件和子组件对msg变量都有控制权和响应效果。<br>而此时，输入框可以正常显示hello，父组件msg改变时，输入框的值也可以正常响应，但如果更改输入框中的值，Vue会发出警告，让我们不要在子组件内部更改prop传进来的值，即单向数据流设定。<br>首先能想到的就是在组件内部使用一个独立的变量，用以控制组件自身的数据，即输入框的值。</p><pre><code>Vue.component(&#39;test&#39;, {    template: &#39;&lt;input v-model=&quot;msgData&quot;&gt;&#39;,    props: [&#39;msg&#39;],    data: function () {        return {            msgData: this.msg        }    }})</code></pre><p>此时，相当于在组件内部初始化了一个msgData，初始值为传入的msg值’hello’。<br>当输入框内容变化时，msgData与之响应，而msg不受影响，就避免了直接对父组件data的操作。<br>但是问题来了，我们的目的是子组件数据变化同时改变父组件数据，所以此处很容易想到变化时emit到父组件，即：</p><pre><code>&lt;div id=&quot;root&quot;&gt;    &lt;test :msg=&quot;msg&quot; @msg-change=&quot;handleMsgChange&quot;&gt;&lt;/test&gt;&lt;/div&gt;</code></pre><pre><code>Vue.component(&#39;test&#39;, {    template: &#39;&lt;input v-model=&quot;msgData&quot;&gt;&#39;,    props: [&#39;msg&#39;],    data: function () {        return {            msgData: this.msg        }    },    watch: {        msgData: function () {            this.$emit(&#39;msg-change&#39;, this.msgData)        }    }})new Vue({    el: &#39;#root&#39;,    data: {        msg: &#39;hello&#39;    },    methods: {        handleMsgChange: function (val) {            this.msg = val        }    }})</code></pre><p>这样当组件内部的msgData变化时，触发msgchange事件，调用handleMsgChange方法，从而改变父组件的msg值。<br>到这一步时，已经可以实现子组件数据变化-&gt;父组件数据同步的过程，但是还有一个显著的问题就是：输入框的值是由子组件的msgData控制，而由于msgData并不是对象属性，其值只有初始化时是与msg相同的，当父组件的msg变化时，msgData并不能同步变化，从而导致父组件数据无法流向子组件。<br>这时，我们就要向子-&gt;父一样对父-&gt;子实现数据监听，即在子组件内部：</p><pre><code>watch: {    msg: function () {        this.msgData = this.msg    }}</code></pre><p>这样，当prop中的msg变化时，子组件的msgData也会同步变化，从而实现双向同步。</p><p>完整代码：<br><em>HTML</em></p><pre><code>&lt;div id=&quot;root&quot;&gt;    &lt;test :msg=&quot;msg&quot; @msg-change=&quot;handleMsgChange&quot;&gt;&lt;/test&gt;&lt;/div&gt;</code></pre><p><em>JS</em></p><pre><code>Vue.component(&#39;test&#39;, {    template: &#39;&lt;input v-model=&quot;msgData&quot;&gt;&#39;,    props: [&#39;msg&#39;],    data: function () {        return {            msgData: this.msg        }    },    watch: {        msg: function () {            this.msgData = this.msg        },        msgData: function () {            this.$emit(&#39;msg-change&#39;, this.msgData)        }    }})var vm = new Vue({    el: &quot;#root&quot;,    data: {        msg: &#39;hello&#39;    },    methods: {        handleMsgChange: function (val) {            this.msg = val        }    }})</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;i&gt;由文档中复刻data作为局部数据处理的方法演变而来&lt;/i&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2017 Easyui 使用总结 （编辑中）</title>
    <link href="https://bydraw.github.io/2018/04/03/20180403/"/>
    <id>https://bydraw.github.io/2018/04/03/20180403/</id>
    <published>2018-04-03T02:18:42.850Z</published>
    <updated>2018-04-03T02:31:35.502Z</updated>
    
    <content type="html"><![CDATA[<p><i>即使Easyui的大部分功能实现已经落后于当前的前端技术，但其丰富的功能和超前的思想仍令人赞叹。</i><br><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Easyui作为一个基于jQuery的早期UI框架，给开发者带来了很多益处，极大地缩减了非核心业务外的开发时间。丰富的可配置控件和API让开发变得非常灵活，可以借此实现非常繁杂的业务功能。虽然随着前端技术的发展和业务需求的逐渐庞大，Easyui传统的DOM实现导致了大场景下的性能问题，但其HTML/JS的双风格写法与当下流行的Vue/React框架思想不谋而合，这着实让人感叹。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;i&gt;即使Easyui的大部分功能实现已经落后于当前的前端技术，但其丰富的功能和超前的思想仍令人赞叹。&lt;/i&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>知是一年春又来，冰雪也消散。</title>
    <link href="https://bydraw.github.io/2018/02/08/20180208/"/>
    <id>https://bydraw.github.io/2018/02/08/20180208/</id>
    <published>2018-02-08T09:01:24.864Z</published>
    <updated>2018-03-14T05:23:36.311Z</updated>
    
    <content type="html"><![CDATA[<p><i>2017过去了，2018开始了。</i><br><a id="more"></a></p><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><h3 id="我的2017年愿望实现了吗？"><a href="#我的2017年愿望实现了吗？" class="headerlink" title="我的2017年愿望实现了吗？"></a>我的2017年愿望实现了吗？</h3><ol><li>工资到达10K ×</li><li>一个单反和一件supreme √</li><li>喜欢上这座城市 ×</li></ol><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="为什么我的愿望没有实现？"><a href="#为什么我的愿望没有实现？" class="headerlink" title="为什么我的愿望没有实现？"></a>为什么我的愿望没有实现？</h3><ol><li>计划跳槽而尚未跳槽</li><li>–</li><li>最厌烦的无非上下班挤地铁，应该换一处离工作地近的住所</li></ol><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><h3 id="2018年该怎么做？"><a href="#2018年该怎么做？" class="headerlink" title="2018年该怎么做？"></a>2018年该怎么做？</h3><ol><li>写一份更丰富的简历，换一份薪资更高的工作</li><li>–</li><li>找到新工作后在附近租一个房子</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;i&gt;2017过去了，2018开始了。&lt;/i&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
